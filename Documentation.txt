This is the documentation file.

1. Creating the Environment

I ran the file as asked. I also created a subdirectory of data called "passwords" 

2. Creating the Menu System 

I took the basic menu structure found in section 5.3 of "Crash Course in Bash Scripting",
pasted it in password-manager.sh, then made modifications as necessary. In particular, I 
replaced the names of the options with the options asked for by the exercise. The code
looks as follows.
 
$ echo # Adding an echo above and below for readability
$ echo "Password Manager Menu"
$ echo "1. Add new password"
$ echo "2. Get password"
$ echo "3. List accounts"
$ echo "4. Exit"
$ echo

The empty echo commands above and below to make it more readable. The case part looks
essentially the same, except I made a modification to option 4. Exit to allow users to 
confirm that they would like to exit. In particular, I put a new while loop inside this
case with its own case structure corresponding to the choices possible. The code for case 4
looks as follows

$ while true; do
$
$                echo
$                read -p "Are you sure you wish to exit? (y/n)" exit_option
$
$                case $exit_option in  
$                "y")
$                        echo 
$                        echo "Exiting..."
$                        exit 0     
$                        ;;
$                "n") 
$                        echo
$                        echo "Returning back to menu"
$                        break
$                        ;;
$                *) 
$                        echo
$                        echo "Please select a 'y' for yes and 'n' for no"
$                        ;;
$                esac
$ done
$ ;; 


3. Master Password Creation

	3.1 Create Initial Functions

	I used an if statement to define initialize. In particular, I used the 
	expression

	$ if [ -e "data/.MASTER']
	
	at the beginning of the if statement to check. Not sure if I should have used
	-f instead of -e, but it seems to work.



	3.2 Modify your main script

	I made the modifications the exercise asked me to make.

	
	3.3 Implement create_master_password 

	I decided to use a while loop for this part. At the beginning of the loop
	the user is prompted to enter a master password, which is then saved as a
	variable $MASTER_PASSWORD and then is asked to re-enter the same password
	with this string being saved as the variable $re_entered. An if statement is
	then called which tests if these two strings agree. If not, then the user
	is told the strings don't match and the loop begins again. If they do match,
	then the loop ends. The while loop code has the following form

	$ while true; do
        $	read -p "Enter master password: " MASTER_PASSWORD
        $	read -p "Re-enter master password: " re_entered
	$
        $        if [ $MASTER_PASSWORD != $re_entered ]
        $        then
        $                echo "Passwords do not match, please try again"
        $        else
        $                break
        $        fi
        $ done

	I then did as the exercise asked to created a salted hash of the master password
	and echo'd the result to data/.MASTER

	$ echo $(openssl passwd -6 -salt $(openssl rand -base64 16) $MASTER_PASSWORD) > data/.MASTER



4. Implementing Password Verification

	4.1 Create Salt Extraction Helper 

	For this part, I decided to use the second get_salt() function provided
	by the exercise prompt. I used the first one on my first attempt, but I
	kept getting errors. The second one worked, so I went with it.


	4.2 Implement check_master_password

	I first used the cat command to read the contents of data/.MASTER into a
	local variable called $password_hash. I then used the get_salt() function
	to extract the salt. The code looks as follows.

        $ password_hash=$(cat data/.MASTER)
        $ password_salt=$(get_salt $password_hash)

	I then used a while loop which first asks the user to input their master
	password using the -s command for security reasons. The output is saved
	as a variable $MASTER_PASSWORD. This and $password_hash are then used
	to produce a new hash variable $user_hash. The code looks as follows.

	$ echo "Please enter your master password: "
        $ read -s MASTER_PASSWORD # using -s to hide the input for security reasons
        $ user_hash=$(openssl passwd -6 -salt $password_salt $MASTER_PASSWORD)

	A new while loop is then started. As long as user_hash and password_hash
	are not equal, it tells the user their entered response does not agree with
	the stored master password, then asks the user to re-enter the master password
	creating a new user_hash in exactly the same way as above. The code for this 
	loop looks as follows.

	$ while [ $password_hash != $user_hash ]; do
        $	echo "Incorrect. Please try again."
        $	read -s MASTER_PASSWORD
        $	user_hash=$(openssl passwd -6 -salt $password_salt $MASTER_PASSWORD)
       	$ done

	I thought making this new loop would give the cleanest experience for the
	user, making it clear that an error occured and allowing them to
	immediately re-enter their password. As soon as the above while loop 
	condition is false, the loop breaks and a 0 is returned.


5. Adding Functionality to Create and Store Passwords

	5.1 Password Generation

	I did as the exercise asked. Although I will note a huge source of errors
	later one was due to the fact that I missed the "24" when I initially did
	this exercise.

	5.2 Password Encryption

	I did as the exercise asked, with 20000 iterations for no particular reason.
	I echo'd the password to encrypt into the encryption command as was done in
	section 9 of "Symmetric Encryption with OpenSSL in Kali Linux". The code
	is as follows.

	$ echo "$2" | openssl enc -aes-256-cbc -pbkdf2 -iter 20000 -a -pass "pass:$1" 


	5.3 New Password Creation

	To begin, this loop asks the user to input an account name, while also telling
	them to press q if they would like to quit. The result is stored as the variable
	account_name

	$ read -p "Please enter an account name (or 'q' to quit): " account_name

	At the next stage of the loop, an if statement is called to check if 
	account_name is equal to 'q'. If so, then the user is informed they are 
	returning to the main menu and break is called to end the loop. 

	$ if [ $account_name == 'q' ]; then
        $        echo "Returning to the main menu..."
        $        break
        $ fi

	After this, another if statement is called which checks if a file called
	account_name already exists. If the file exists, the the while loop is
	restarted. I wanted to give the user the option to continue and overwrite
	the old password, but I couldn't think of a clean way to do this. Perhaps
	another case statement? The first part of the if statement looks like this

	$ if [ -f data/passwords/${account_name} ]; then
        $         echo "$account_name already has a password"
        $         continue
	
	If the account doesn't exist, the user is prompted to confirm that
	account_name is correct with a (y/n) option. A case statement is then called.
	If y is selected, the function generate_password() is called to create a 
	random string. The result is then encrypted using encrypt_password() and saved
	to data/passwords/account_name. The loop then breaks.

	$ 'y') 
        $       echo "Username confirmed. Password being generated"
        $       password=$(generate_password)
        $       encrypt_password $1 $password > data/passwords/${account_name}
        $       break
        $       ;;

	If n is selected, then the user is told to try again and the loop is restarted.
	Similarly, if anything else is entered then the user is chastized 
	appropriately and the loop begins again. I think there is probably a better
	way to do this, but I thought it was getting too complicated with while
	statements inside while statements.

	$ 'n')
        $        echo "Please try again"
        $        echo 
        $        continue
        $        ;;
	$
        $ *)
        $        echo "Please enter 'y' for 'Yes' or 'n' for 'No'"
        $        continue
        $        ;;


	5.4 Integrate with Main Script

	I did as the exercise asked.

6. Password Retrieval

        6.1 Password Decryption

	I did a very similar thing in this part as I did in Part 2 of Exercise 5.
	I echo'd the ciphertext into the openssl enc -d with the same specifications
	as in that exercise.

	$ echo "$2" | openssl enc -d -aes-256-cbc -pbkdf2 -iter 20000  -a -pass "pass:$1"


        6.2 Password Display

	For this, I used echo to print the plaintext password. After that I implemented
	a prompt which reads "Press Enter after done viewing". Once the user hits
	enter the clear command is called which clears the terminal. The follwoing are
	the commands in the function.

        $ echo "$1"
        $ read -p "Press Enter after done viewing" option
        $ clear


        6.3 Password Retrieval

	THIS ONE CAUSED ME SO MANY PROBLEMS. I learned you need to put quotes around
	everything otherwise it all breaks. Lesson learned.

	Anyways, I first saved the input as a variable master_password as asked.
	Form here, I implemented an if statement which checks if data/passwords
	has any files contained in it using the ls command and using -z to check
	if the string is empty. The start of the if statement looks as follows.

        $ if [ -z "$(ls -A data/passwords)" ]

	I included the -A because a stack exchange post told me to. I don't think it's
	necessary in this case since there are no . or .. entries in passwords,
	but better safe than sorry. The "" are needed here to make sure the output
	is read as a string (my first big error!).


	In the loop, first the user is asked to enter an account name with the input
	saved as a local variable account_name. 

	$ read -p "Enter account name: " account_name

	An if statement then appears which checks if a file called account_name exists 
	in passwords. If not, the user is then asked to enter 'q' to quit or hit any 
	other key to continue. If 'q' is selected, 0 is returned. Otherwise, the loop
	is continued.

	$ read -p "No account records. Press 'q' to quit and any other key to continue: " option
	$
        $ case $option in
        $ 'q')
        $       return 0
        $       ;;
	$
        $ *)
        $       ;;
        $ esac
	
	If the account does exist, the loop breaks. From here, the contents of 
	data/passwords/account_name are read into a variable called $encrypted_password
	using the cat command. The function decrypt_password() is then called to 
	decrypt the encrypted password and saves the result as a variable called
	$plaintext_password. The function display_password() is then called to 
	print the result.

        $ encrypted_password=$(cat "data/passwords/${account_name}")
        $ plaintext_password=$(decrypt_password "$master_password" "$encrypted_password")
        $ display_password "$plaintext_password"


        6.4 Integrate with Main Script

	I did as the exercise asked.


7. Listing Accounts

This uses a very similar idea to Part 3 of Exercise 5. An if statement is called
which checks if data/passwords has any contents. In particular, the command
"ls data/passwords" prints the contents of this directory as a string and -z is
used to check if this is the empty string or not. 

$ if [ -z "$(ls -A data/passwords)" ]

If the string is indeed empty, the user is told that no account records exist and a
1 is returned. Otherwise, the command ls -1 data/passwords is called as asked. Here is 
the full if statement.

$ if [ -z "$(ls -A data/passwords)" ] # checks if any accounts are listed in data/passwords
$ then
$	echo
$	echo "No accounts recorded"
$	
$	return 1
$ else
$	echo
$	ls -1 data/passwords # prints the names of the accounts in a vertical stack
$ fi

